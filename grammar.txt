label         : /[a-zA-Z_][a-zA-Z0-9_]*/ ;

string        : /"(\\.|[^"])*"/ ;

file          : '-' <label> ('-' <label>)* ;

unsigned      : /[0-9]+/ ;

integer       : /[-+]?[0-9]+/ ;

float         : /[-+]?([0-9]*[.])?[0-9]+/ ;

longcomment   : /;;(;(?!;)|[^;])*;;/ ;

shortcomment  : /;[^\n]*/ ;

comment       : (<longcomment> | <shortcomment>) ;

bool          : "true" 
              | "false";

vector        : '|' <float>+ '|' ;

matrix        : <vector> <vector>+ ;

fcall         : <label> <lexp>? (',' <lexp>)*;

factor        : '(' <lexp> ')'
              | <label>
              | '{' <fcall> '}'
              | <string>
              | <float>
              | <unsigned>
              | <integer>
              | <matrix>
              | <vector>;

term          : <factor> (('*' | '/' | '%' | "dot" | "cross") <factor>)* ;

lexp          : <term> (('+' | '-') <term>)* ;

type          : ("string" | "bool" | "unsigned" | "integer" | "float" | "label" | "vector" | "matrix") ;

typeident     : <type> <label> ;

comparator    : (">" | "<" | "<=" | ">=" | "=") ;

exp           : <lexp> <comparator> <lexp>;

assignment    : <typeident> ":=" <lexp>;

bs            : (<block> | <stmt> | <comment>) ;

function      : <label> <args> ("<-" <type>) ':' <bs>*;

trait         : ':' <label> <bs>*;

traitident    : ':' <label> <args> ("<-" <type>)?;

block         : ("if" <exp> <bs>* ("else if" <exp> <bs>*)* ("else" <bs>*)? 
              |  "include" <file>*
              |  "while" <exp> <bs>*
              |  "for" <assignment>? ';' <exp>? ';' <integer>? <bs>*
              |  "type" <label> ((<function> "fin"|<trait> "fin"|<typeident> '.') )*
              |  "def" <function> ) "fin" ;
               
stmt          : ("<-" <lexp> 
              |  "<-|" <label>
              |  <assignment>
              |  <traitident>
              |  <fcall> ) '.' ;


args          : <typeident>? (',' <typeident>)*;



metis         : /^/ <bs>* /$/;



