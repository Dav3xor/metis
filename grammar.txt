label         : /[a-zA-Z_][a-zA-Z0-9_]*/ ;

string        : /"(\\.|[^"])*"/ ;

file          : '-' <label> ;

unsigned      : /[0-9]+/ ;

integer       : /[-+]?[0-9]+/ ;

float         : /[-+]?([0-9]*[.])?[0-9]+/ ;

longcomment   : /;;(;(?!;)|[^;])*;;/ ;

shortcomment  : /;[^\n]*/ ;

comment       : (<longcomment> | <shortcomment>) ;

bool          : ("true" | "false");

vector        : '|' <float>+ '|' ;

matrix        : <vector> <vector>+ ;

fcall         : <label> <lexp>? (',' <lexp>)*;

group         : '(' <lexp> ')' ;

ffcall        : '{' <fcall> '}' ;

factor        : <group>
              | <bool>
              | <label>
              | <ffcall>
              | <string>
              | <float>
              | <unsigned>
              | <integer>
              | <matrix>
              | <vector>;

operator      : "*" | "/" | "%" | "dot" | "cross" ;

term          : <factor> (<operator> <factor>)* ;

lexp          : <term> (("+" | "-") <term>)* ;

type          : ("string" | "bool" | "unsigned" | "integer" | "float" | "label" | "vector" | "matrix") ;

typeident     : <type> <label> ;

comparator    : (">" | "<" | "<=" | ">=" | "=") ;

exp           : <lexp> <comparator> <lexp>;

returnnv      : "<~" ;

return        : "<-" <lexp>;

raise         : "<-!" <lexp>;

assignment    : <typeident> ":=" <lexp>;

bs            : ( <comment> | <block> | <stmt> ) ;

function      : <label> <args> ("<-" <type>) ':' <bs>*;

trait         : ':' <label> <bs>*;

traitident    : ':' <label> <args> ("<-" <type>)?;

if            : "if" <exp> <bs>* ("else if" <exp> <bs>*)* ("else" <bs>*)? ;

include       : "include" <file>* ;

while         : "while" <exp> <bs>* ;

for           : "for" <assignment>? ';' <exp>? ';' <integer>? <bs>* ;

typedef       : "type" <label> ((<function> "fin"|<trait> "fin"|<typeident> '.') )* ;

functiondef   : "def" <function> ;

endblock     : "fin" ;

endstmt      : "." ;

block         : (<if>
              |  <include>
              |  <while>
              |  <for>
              |  <typedef>
              |  <functiondef>) <endblock> ;
               
stmt          : (<raise> 
              |  <return>
              |  <returnnv>
              |  <assignment>
              |  <traitident>
              |  <fcall> ) <endstmt> ;


args          : <typeident>? (',' <typeident>)*;



metis         : /^/ <bs>* /$/;



