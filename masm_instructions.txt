MASM Assembler 
-----------------------------------------------------------------------------

addressing modes:
-----------------------------------------------------------------------------
REGA-D        (registers A through D)
REGSP         (stack pointer)
REGIP         (instruction pointer) 
REGBP         (buffer pointer) 
REGERR        (error register)
STACK_PUSH    (push result onto stack)
STACK_POP     (pop src from stack)



comments:
-----------------------------------------------------------------------------

* all comment lines start with an asterisk

* this is a comment
* this is also a comment

this is not a comment


proposed instructions:
-----------------------------------------------------------------------------

WAIT              src 

  waits for number of microseconds held in src

CURTIME           dest

  returns the current time in microseconds

OPEN              src, dest

  opens file pointed to by src, includes sockets?  urls?.  leaves file # in dest


CLOSE             src

  closes file # pointed to by src

READ               src (file), dest, maxbytes

WRITE              dest (file), data, len

instructions:
-----------------------------------------------------------------------------

ERROR               (no operands)

  halts execution, prints an error message to the console.

END                 (no operands)

  normal halt of execution (end of program)

NOOP                (no operands)

  no operation, empty instruction

JUMP                addr_mode

  jump to location held in addr_mode

JUMPI               location 

  jump to location held in instruction

JIZZ                src, dest

  if value in src is zero, jump to dest

JNZ                 src, dest

  if value in src is not zero, jump to dest

JNE                 src, dest, val

  if value in src does not equal value in dest, jump to val

JMPE                src, dest, val

  if value in src equals value in dest, jump to val

STORE               src, dest

  copy value in src, put it in dest

STOREI              dest, val

  stores value in destination

STORESR             src, offset

  stores a value on the stack from src, using the formula:

  stack[REGSP - offset] = src

LOADSR              offset, dest
  
  loads a value from the stack, relative to the stack pointer
  using offset.

  dest = stack[REGSP - offset]

STACK_ADJ           amount
  
  adjust the stack pointer by amount

  REGSP -= amount

LOC                 label
 
  set a label to the current value of REGIP  

LABEL               label, val

  set a label to value val

FLOAT               label, val

  set a label to value val (float)

BUFFER              label, size, values

  set a label to a buffer of size values

  sample:

  BUFFER                buf_name 9

  -0.8 -0.8 0.0
   0.8 -0.8 0.0
   0.0  0.8 0.0

MATRIX              label, width, height, values

  set a label to a matrix of size width x height

  sample:

  MATRIX    matrix1 3 1
  
  1.0 1.0 1.0

SHADER              label <shader> END-SHADER

  set a label to a shader, compiles shader for you.

  SHADER                vertex_shader

  #version 400
  in  vec3 vp;
  in  vec3 color;
  out vec3 vcolor;

  void main () {
    gl_Position = vec4(vp.x, vp.y, 0.0, 1.0);
    vcolor = vec3(1.0, 1.0, 1.0);
  }

  END-SHADER


IMATRIX             label, width, height

  creates an identiy matrix pointed at by label

MPUSH               location

 pushes the matrix at location onto the stack 

MMUL                src1, src2, dest

 multiplies src1 with src2, putting the results in dest.

 all operands specify addressing modes

MADD                src1, src2, dest

 multiplies src1 with src2, putting the results in dest.

 all operands specify addressing modes

VDOT                src1, src2, dest

 multiplies src1 with src2, putting the results in dest.

 all operands specify addressing modes

VCROSS              src1, src2, dest

 multiplies src1 with src2, putting the results in dest.

 all operands specify addressing modes

GLDRAWELEMENTS      mode, count, type, indices

GLDRAWARRAYS        mode, first, count

GLGENBUFFERS        numids, start

GLGENVERTEXARRAYS   numids, start

GLBINDVERTEXARRAY   id

GLBINDBUFFER        target, id

GLBUFFERDATA        target, size, data_index, usage

GLENABLEVERTEXATTRIBARRAY       index

GLVERTEXATTRIBPOINTER           index, size, type, normalized, stride, pointer

GLDISABLEVERTEXATTRIBARRAY      index

GLENABLE                        capability

GLDEPTHFUNC                     function

GLCREATESHADER                  type, index

GLSHADERSOURCE                  shader, index

GLCOMPILESHADER                 index

GLCREATEPROGRAM                 index

GLATTACHSHADER                  program_index, shader_index

GLLINKPROGRAM                   index

GLDETACHSHADER                  program_index, shader_index

GLDELETESHADER                  shader_index

GLUSEPROGRAM                    program_index

GLUNIFORMFV                     src, uniform_index

GLUNIFORMIV                     src, uniform_index

GLUNIFORMUIV                    src, uniform_index

GLUNIFORMMATRIXFV               src, uniform_index

GLGETUNIFORMLOCATION            program_index, uniform_index uniform_name

GLGENTEXTURES                   num_identifiers, start_index

GLBINDTEXTURE                   target, texture_index

GLTEXPARAMETERI                 target, pname, param

GLTEXPARAMETERFV                src, target, pname

GLGENERATEMIPMAP                target

GLTEXIMAGE2D                    target, level, internal_format, width, height, border, format, type, data_index

GLGETATTRIBLOCATION             attrib_index, attrib

GLACTIVETEXTURE                 texture

GLCLEAR                         bitfield

GLCLEARCOLOR                    r,g,b,a

NOT
INC
DEC
ADD
SUB
MUL
DIV
MOD
AND
OR
XOR
  }),
