
*
ERROR
                                           m.add_error      (); } },

END
                                           m.add_end        (); } }, 

NOOP
                                           m.add_noop       (); } }, 

JUMP
                                           m.add_jump       (this->get_addr_mode()); } },

JUMPI
                                           m.add_jumpi      (this->get_addr(m));   } },

JIZZ
                                           address_mode src  = this->get_addr_mode();
                                           address_mode dest = this->get_addr_mode();
                                           m.add_jizz       (src,dest); } }, 

JNZ
                                           address_mode src  = this->get_addr_mode();
                                           address_mode dest = this->get_addr_mode();
                                           m.add_jnz        (src,dest); } },

JNE
                                           address_mode src  = this->get_addr_mode();
                                           address_mode dest = this->get_addr_mode();
                                           uint64_t val      = this->get_addr(m);
                                           m.add_jne        (src, dest, val); } }, 

JMPE
                                           address_mode src  = this->get_addr_mode();
                                           address_mode dest = this->get_addr_mode();
                                           uint64_t val      = this->get_uint64();
                                           m.add_jmpe       (src, dest, val); } },

STORE
                                           address_mode src  = this->get_addr_mode();
                                           address_mode dest = this->get_addr_mode();
                                           m.add_store      (src, dest); } },

STOREI
                                           address_mode dest = this->get_addr_mode();
                                           uint64_t     val  = this->get_addr(m);
                                           m.add_storei     (dest, val); } },

STORESR
                                           address_mode src    = this->get_addr_mode();
                                           uint64_t     offset = this->get_addr(m);
                                           m.add_store_sr     (src, offset); } },

LOADSR
                                           uint64_t     offset = this->get_addr(m);
                                           address_mode dest   = this->get_addr_mode();
                                           m.add_load_sr      (offset, dest); } },

STACK_ADJ
                                           uint64_t     amount = this->get_uint64();
                                           m.add_stack_adj    (amount); } },

LOC
                                           m.add_label_ip   (this->get_string().c_str()); } },

LABEL
                                           string label = this->get_string();
                                           uint64_t val = this->get_uint64();
                                           m.add_label_val  (label.c_str(), val); } },

FLOAT
                                           string label = this->get_string();
                                           float val = this->get_float(m);
                                           m.add_label_float  (label.c_str(), val); } },

BUFFER
                                           string  label   = this->get_string();
                                           uint64_t size   = this->get_uint64(); 
                                           float *buffer   = new float[size];
                                           
                                           for(uint32_t i=0; i<size; i++) {
                                             buffer[i] = this->get_float(m);
                                           }

                                           m.add_buffer((uint8_t *)buffer, size, label.c_str());
                                           delete[] buffer; } },

MATRIX
                                           string  label   = this->get_string();
                                           // have to use uint32_t to get iostream
                                           // to store as integer, not ascii...
                                           uint32_t width  = this->get_uint8(); 
                                           uint32_t height = this->get_uint8(); 
                                           uint32_t size   = width*height;
                                           float *mat      = new float[size];
                                           for(uint32_t i=0; i<size; i++) {
                                             mat[i] = this->get_float(m);
                                           }
                                           m.add_matrix(width, height, (uint8_t *)mat, label.c_str());
                                           delete[] mat; } },

SHADER
                                           string  label    = this->get_string();
                                           string  shader   = "";
                                           bool    proceed  = true;
                                           while(proceed) {
                                             string cur = this->get_line();
                                             if (trim_copy(cur) == "END-SHADER") {
                                               proceed=false;
                                             } else if (infile->eof()) {
                                               proceed=false;
                                             } else {
                                               shader += cur + "\n";
                                             }
                                           }
                                           m.add_data((const uint8_t *)shader.c_str(), shader.length()+1, label.c_str()); }},

IMATRIX
                                           string  label   = this->get_string();
                                           uint32_t width  = this->get_uint8(); 
                                           uint32_t height = this->get_uint8(); 
                                           m.add_identity_matrix(width,height,label.c_str()); } },

MPUSH
                                           uint64_t loc    = this->get_addr(m);
                                           m.add_push_matrix(loc); } },

MMUL
                                           address_mode src1 = this->get_addr_mode();
                                           address_mode src2 = this->get_addr_mode();
                                           uint64_t     dest = this->get_addr(m);
                                           m.add_matrix_multiply(src1, src2, dest); } },

MADD
                                           address_mode src1 = this->get_addr_mode();
                                           address_mode src2 = this->get_addr_mode();
                                           uint64_t     dest = this->get_addr(m);
                                           m.add_matrix_add(src1, src2, dest); } },

VDOT
                                           address_mode src1 = this->get_addr_mode();
                                           address_mode src2 = this->get_addr_mode();
                                           uint64_t     dest = this->get_addr(m);
                                           m.add_vector_dot(src1, src2, dest); } },

VCROSS
                                           address_mode src1 = this->get_addr_mode();
                                           address_mode src2 = this->get_addr_mode();
                                           uint64_t     dest = this->get_addr(m);
                                           m.add_vector_cross(src1, src2, dest); } },

GLDRAWELEMENTS
                                           GLenum mode      = this->get_GLenum();
                                           GLsizei count    = this->get_GLsizei();
                                           GLenum type      = this->get_GLenum();
                                           uint64_t indices = this->get_uint64();
                                           m.add_gldrawelements(mode, count, type, indices); } },

GLDRAWARRAYS
                                           GLenum mode        = this->get_GLenum();
                                           GLint first        = this->get_GLint();
                                           GLsizei count      = this->get_GLsizei();
                                           m.add_gldrawarrays(mode, first, count); } },

GLGENBUFFERS
                                           GLsizei numids           = this->get_GLsizei();
                                           metisgl_identifier start = this->get_metisid(m);
                                           m.add_glgenbuffers(numids, start); } },

GLGENVERTEXARRAYS
                                           GLsizei numids           = this->get_GLsizei();
                                           metisgl_identifier start = this->get_metisid(m);
                                           m.add_glgenvertexarrays(numids, start); } },

GLBINDVERTEXARRAY
                                           metisgl_identifier id    = this->get_metisid(m);
                                           m.add_glbindvertexarray(id); } },

GLBINDBUFFER
                                           GLenum target            = this->get_GLenum();
                                           metisgl_identifier id    = this->get_metisid(m);
                                           m.add_glbindbuffer(target, id); } },

GLBUFFERDATA
                                           GLenum target            = this->get_GLenum();
                                           GLsizeiptr size          = this->get_GLsizeiptr();
                                           uint64_t data_index      = this->get_addr(m);
                                           GLenum usage             = this->get_GLenum();
                                           m.add_glbufferdata(target, size, data_index, usage); } },

GLENABLEVERTEXATTRIBARRAY
                                           GLuint index             = this->get_GLuint();
                                           m.add_glenablevertexattribarray(index); } },

GLVERTEXATTRIBPOINTER
                                           GLuint index             = this->get_GLuint();
                                           GLint  size              = this->get_GLint();
                                           
                                           GLenum type              = this->get_GLenum();
                                           GLboolean normalized     = this->get_GLboolean();
                                           GLsizei stride           = this->get_GLsizei();
                                           uint64_t pointer         = this->get_metisid(m);
                                           m.add_glvertexattribpointer(index, size, type, normalized, stride, pointer); } },

GLDISABLEVERTEXATTRIBARRAY
                                           GLuint index             = this->get_GLuint();
                                           m.add_gldisablevertexattribarray(index); } },

GLENABLE
                                           GLenum capability        = this->get_GLenum();
                                           m.add_glenable(capability); } },

GLDEPTHFUNC
                                           GLenum function          = this->get_GLenum();
                                           m.add_gldepthfunc(function); } },

GLCREATESHADER
                                           GLenum type              = this->get_GLenum();
                                           metisgl_identifier index = this->get_metisid(m);
                                           m.add_glcreateshader(type, index); } },

GLSHADERSOURCE
                                           GLuint shader            = this->get_addr(m);
                                           metisgl_identifier index = this->get_metisid(m);
                                           m.add_glshadersource(shader, index); } },

GLCOMPILESHADER
                                           metisgl_identifier index = this->get_metisid(m);
                                           m.add_glcompileshader(index); } },

GLCREATEPROGRAM
                                           metisgl_identifier index = this->get_metisid(m);
                                           m.add_glcreateprogram(index); } },

GLATTACHSHADER
                                           metisgl_identifier program_index = this->get_metisid(m);
                                           metisgl_identifier shader_index  = this->get_metisid(m);
                                           m.add_glattachshader(program_index, shader_index); } },

GLLINKPROGRAM
                                           metisgl_identifier index = this->get_metisid(m);
                                           m.add_gllinkprogram(index); } },

GLDETACHSHADER
                                           metisgl_identifier program_index = this->get_metisid(m);
                                           metisgl_identifier shader_index  = this->get_metisid(m);
                                           m.add_gldetachshader(program_index, shader_index); } },

GLDELETESHADER
                                           metisgl_identifier shader_index = this->get_metisid(m);
                                           m.add_gldeleteshader(shader_index); } },

GLUSEPROGRAM
                                           metisgl_identifier program_index = this->get_metisid(m);
                                           m.add_gluseprogram(program_index); } },

GLUNIFORMFV
                                           address_mode src                  = this->get_addr_mode();
                                           metisgl_identifier uniform_index  = this->get_metisid(m);
                                           m.add_gluniformfv(src, uniform_index); } },

GLUNIFORMIV
                                           address_mode src                  = this->get_addr_mode();
                                           metisgl_identifier uniform_index  = this->get_metisid(m);
                                           m.add_gluniformiv(src, uniform_index); } },

GLUNIFORMUIV
                                           address_mode src                  = this->get_addr_mode();
                                           metisgl_identifier uniform_index  = this->get_metisid(m);
                                           m.add_gluniformuiv(src, uniform_index); } },

GLUNIFORMMATRIXFV
                                           address_mode src                  = this->get_addr_mode();
                                           metisgl_identifier uniform_index  = this->get_metisid(m);
                                           m.add_gluniformmatrixfv(src, uniform_index); } },

GLGETUNIFORMLOCATION
                                           metisgl_identifier program_index  = this->get_metisid(m);
                                           metisgl_identifier uniform_index  = this->get_metisid(m);
                                           string uniform_name               = this->get_string();
                                           m.add_glgetuniformlocation(program_index,uniform_index, uniform_name.c_str()); } },

GLGENTEXTURES
                                           GLsizei num_identifiers           = this->get_addr_mode();
                                           metisgl_identifier start_index    = this->get_metisid(m);
                                           m.add_glgentextures(num_identifiers, start_index); } },

GLBINDTEXTURE
                                           GLenum target                     = this->get_GLenum();
                                           metisgl_identifier texture_index  = this->get_metisid(m);
                                           m.add_glbindtexture(target, texture_index); } },

GLTEXPARAMETERI
                                           GLenum target                     = this->get_GLenum();
                                           GLenum pname                      = this->get_GLenum();
                                           GLint param                       = this->get_GLint();
                                           m.add_gltexparameteri(target, pname, param); } },

GLTEXPARAMETERFV
                                           address_mode src                  = this->get_addr_mode();
                                           GLenum target                     = this->get_GLenum();
                                           GLenum pname                      = this->get_GLenum();
                                           m.add_gltexparameterfv(src, target, pname); } },

GLGENERATEMIPMAP
                                           GLenum target                     = this->get_GLenum();
                                           m.add_glgeneratemipmap(target); } },

GLTEXIMAGE2D
                                           GLenum target                     = this->get_GLenum();
                                           GLint level                       = this->get_GLint();
                                           GLint internal_format             = this->get_GLint();
                                           GLsizei width                     = this->get_GLsizei();
                                           GLsizei height                    = this->get_GLsizei();
                                           GLint border                      = this->get_GLint();
                                           GLenum format                     = this->get_GLenum();
                                           GLenum type                       = this->get_GLenum();
                                           uint64_t data_index               = this->get_metisid(m);
                                      
                                           m.add_glteximage2d(target, level, internal_format,
                                                              width, height, border, format,
                                                              type, data_index); } },

GLGETATTRIBLOCATION
                                           metisgl_identifier attrib_index   = this->get_metisid(m);
                                           string attrib                     = this->get_string();
                                           m.add_glgetattriblocation(attrib_index, attrib.c_str()); } },

GLACTIVETEXTURE
                                           GLenum texture                    = this->get_GLenum();
                                           m.add_glactivetexture(texture); } },

GLCLEAR
                                           GLbitfield bitfield               = this->get_GLbitfield();
                                           m.add_glclear(bitfield); } },

GLCLEARCOLOR
                                           GLclampf r                        = this->get_GLclampf();
                                           GLclampf g                        = this->get_GLclampf();
                                           GLclampf b                        = this->get_GLclampf();
                                           GLclampf a                        = this->get_GLclampf();
                                           m.add_glclearcolor(r,g,b,a); } },
NOT
INC
DEC
ADD
SUB
MUL
DIV
MOD
AND
OR
XOR
  }),
