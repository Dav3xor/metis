#!/usr/bin/python

import sys, os, platform, subprocess, datetime

platforms = {'Linux':  {'link_options':  '-o {output} {object_files} -lglfw3 -lGLEW -lX11 -lXrandr -lXinerama ' +
                                         '-lXi -lXxf86vm -lXcursor -ldl -lGL -lm -lpthread ' +
                                         '/usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.54.0',
                        'build_options': '-Wall -std=c++11 -ggdb -c {input} -o {output}',
                        'compiler':      'g++' } ,
             'Darwin': {'link_options':  '-o {output} {object_files} -lglfw3 -lboost_program_options -framework Cocoa ' +
                                         '-framework OpenGL -framework IOKit -framework CoreVideo -lm',
                        'build_options': '-Wall -std=c++11 -ggdb -c {input} -o {output}',
                        'compiler':      'g++'} } 

programs =  {'test': { 'files':  ['test.cpp', 
                                  'add_instructions.cpp', 
                                  'file.cpp', 
                                  'util.cpp', 
                                  'eval.cpp', 
                                  'masm.cpp'] },
             'metis': { 'files': ['metismain.cpp',
                                  'add_instructions.cpp', 
                                  'file.cpp', 
                                  'util.cpp', 
                                  'eval.cpp', 
                                  'masm.cpp'] } }

files =     {'add_instructions.cpp':     {'dependencies': ['metis.hpp'] }, 
             'file.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'util.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'eval.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'metismain.cpp':            {'dependencies': ['metis.hpp'] }, 
             'test.cpp':                 {'dependencies': ['metis.hpp', 'catch.hpp'] }, 
             'masm.cpp':                 {'dependencies': ['metis.hpp'] } }

pform    = platforms[platform.system().split('-')[0]]

def make_obj_file(file):
  object_file, ext = os.path.splitext(file)
  object_file += ".o"
  return object_file

def check_dependencies(file):
  object_file = make_obj_file(file)
  file_modified = os.path.getmtime(object_file)
  for dep in files[file]['dependencies']:
    if not os.path.isfile(dep):
      sys.exit()
    if file_modified <= os.path.getmtime(dep):
      return True
  return False 

def build_source_file(file,program_age):
  if not os.path.isfile(file):
    print "File %s does not exist" % file
    sys.exit()
  object_file = make_obj_file(file)
  if (not (os.path.isfile(object_file))) or \
     (os.path.getmtime(file) >= os.path.getmtime(object_file)) or \
     (check_dependencies(file)):
    command  = pform['compiler']
    args     = pform['build_options'].format(**{'input': file, 'output': object_file})
   
    command_line = command + ' ' + args 
    print "compiling: " + file
    try:
      output = subprocess.check_output(command_line,stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError as e:
      print e.output
      exit()
    return True
  else:
    return False
      
    
def build_program(program, files):
  build_program = False
  if not os.path.isfile(program):
    build_program = True
    program_modified = 0.0
  else:
    program_modified = os.path.getmtime(program)
  for file in files:
    if build_source_file(file,program_modified):
      build_program = True
  return build_program

for program, attrs in programs.iteritems():
  if build_program(program, attrs['files']):
    command  = pform['compiler']
    args     = pform['link_options'].format(output=program, 
                                            object_files=' '.join([make_obj_file(i) for i in attrs['files']]))
    command_line = command + ' ' + args
    print "linking: " + program
    try:
      output = subprocess.check_output(command_line,stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError as e:
      print e.output
      exit()

print "Done."

"""
CC     = g++
CFLAGS = -Wall -std=c++11 -ggdb
CLIBS  = -lglfw3 -lGLEW -lX11 -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor -ldl -lGL -lm -lpthread /usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.54.0
#CLIBS  = -lglfw3 -lboost_program_options -framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo -lm
DEPS   = metis.hpp
TESTSRCS   = add_instructions.cpp file.cpp util.cpp eval.cpp test.cpp masm.cpp
METISSRCS   = add_instructions.cpp file.cpp util.cpp eval.cpp metismain.cpp masm.cpp
TESTOBJS   = $(TESTSRCS:.cpp=.o)
METISOBJS   = $(METISSRCS:.cpp=.o)
TEST   = test
METIS  = metis

all: $(TEST) $(METIS)

$(TEST): $(TESTOBJS)
	$(CC) $(CFLAGS) -o $(TEST) $(TESTOBJS) $(CLIBS)

$(METIS): $(METISOBJS)
	$(CC) $(CFLAGS) -o $(METIS) $(METISOBJS) $(CLIBS)

.cpp.o:
	$(CC) $(CFLAGS) -c $< -o $@

depend: $(SRCS)
	makedepend $^

# ----
"""
