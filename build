#!/usr/bin/python

import sys, os, platform

platforms = {'Linux':  {'link_options':  '-lglfw3 -lGLEW -lX11 -lXrandr -lXinerama ' +
                                         '-lXi -lXxf86vm -lXcursor -ldl -lGL -lm -lpthread ' +
                                         '/usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.54.0',
                        'build_options': '-Wall -std=c++11 -ggdb',
                        'compiler':      'g++' } ,
             'Darwin': {'link_options':  '-lglfw3 -lboost_program_options -framework Cocoa ' +
                                         '-framework OpenGL -framework IOKit -framework CoreVideo -lm',
                        'build_options': '-Wall -std=c++11 -ggdb',
                        'compiler':      'g++'} } 

programs =  {'test': { 'files': ['add_instructions.cpp', 'file.cpp', 'util.cpp', 'eval.cpp', 'test.cpp', 'masm.cpp'] },
             'metis': { 'files': ['add_instructions.cpp', 'file.cpp', 'util.cpp', 'eval.cpp', 'metismain.cpp', 'masm.cpp'] } }

files =     {'add_instructions.cpp':     {'dependencies': ['metis.hpp'] }, 
             'file.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'util.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'eval.cpp':                 {'dependencies': ['metis.hpp'] }, 
             'metismain.cpp':            {'dependencies': ['metis.hpp'] }, 
             'test.cpp':                 {'dependencies': ['metis.hpp', 'catch.hpp'] }, 
             'masm.cpp':                 {'dependencies': ['metis.hpp'] } }

def check_dependencies(file):
  file_modified = os.path.getmtime(file)
  for dep in files[file]['dependencies']:
    if not os.path.isfile(dep):
      print "Dependency %s for file %s does not exist" % (dep, file)
      sys.exit()
    if file_modified <= os.path.getmtime(dep):
      return True
  return False 

def build_source_file(file,program_age):
  if not os.path.isfile(file):
    print "File %s does not exist" % file
    sys.exit()
  object_file, ext = os.path.splitext(file)
  object_file += ".o"
  if (check_dependencies(file)) or \
     (not (os.path.isfile(object_file))) or \
     (os.path.getmtime(file) >= program_age):
    platform = platforms[os.platform(terse=True).split('-')[0]]
    command  = platform['compiler']
    args     = platform['build_options']
    
    print "compiling: " + file
    output = subprocess.check_output(command+args,stderr=subprocess.STDOUT)
    
    #except subprocess.CalledProcessError:
    #  print output
      
  build_source = False
  for dependency in files[file]:
    if not os.path.isfile(dependency):
      print "Dependency %s for file %s does not exist" % (dependency, file)
      sys.exit()
      build_source = True
    elif check_dependencies(file):
      build_source = True
    
def build_program(program, files):
  build_program = False
  if not os.path.isfile(program):
    build_program = True
  program_modified = os.path.getmtime(program)
  for file in files:
    build_source_file(file,program_modified)


for program, attrs in programs.iteritems():
  build_program(program, attrs['files'])



"""
CC     = g++
CFLAGS = -Wall -std=c++11 -ggdb
CLIBS  = -lglfw3 -lGLEW -lX11 -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor -ldl -lGL -lm -lpthread /usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.54.0
#CLIBS  = -lglfw3 -lboost_program_options -framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo -lm
DEPS   = metis.hpp
TESTSRCS   = add_instructions.cpp file.cpp util.cpp eval.cpp test.cpp masm.cpp
METISSRCS   = add_instructions.cpp file.cpp util.cpp eval.cpp metismain.cpp masm.cpp
TESTOBJS   = $(TESTSRCS:.cpp=.o)
METISOBJS   = $(METISSRCS:.cpp=.o)
TEST   = test
METIS  = metis

all: $(TEST) $(METIS)

$(TEST): $(TESTOBJS)
	$(CC) $(CFLAGS) -o $(TEST) $(TESTOBJS) $(CLIBS)

$(METIS): $(METISOBJS)
	$(CC) $(CFLAGS) -o $(METIS) $(METISOBJS) $(CLIBS)

.cpp.o:
	$(CC) $(CFLAGS) -c $< -o $@

depend: $(SRCS)
	makedepend $^

# ----
"""
